pluto_class PlayerProvider
	function getPlayerNames(include_user: bool): table
		local names = {}
		for self:getPlayers(include_user) as p do
			table.insert(names, players.get_name(p))
		end
		return names
	end
end

pluto_class PlayerProviderAll extends PlayerProvider
	function getPlayers(include_user: bool)
		return players.list_all_with_excludes(include_user)
	end
end

pluto_class PlayerProviderSingle extends PlayerProvider
	function __construct(p, list)
		self.p = p
		self.m_list = list
	end

	function getPlayers(include_user: bool)
		return { self.p }
	end
end

local function build_player_commands(pp, list)
	list:action("Player Action", {"luaplyaction"}, "", function()
		util.toast("Player action used for: "..table.concat(pp:getPlayerNames(true), ", "))
	end)
	if pp instanceof PlayerProviderSingle then
		list:action("Individual Player Action", {}, "", function()
			util.toast("Individual player action used for: "..players.get_name(pp.p))
		end)
	end
	do
		local nested = list:list("A List")
		nested:action("Nested Action", {}, "", function()
			util.toast("Nested action used for: "..table.concat(pp:getPlayerNames(true), ", "))
		end)
	end
end

build_player_commands(pluto_new PlayerProviderAll(), menu.ref_by_path("Players>All Players"))

players.add_command_hook(function(p, list)
	build_player_commands(pluto_new PlayerProviderSingle(p), list)
end)
